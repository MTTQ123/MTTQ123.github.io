<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Js数组去重</title>
      <link href="/posts/ae538b95.html"/>
      <url>/posts/ae538b95.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><ul><li><a href="#%E6%B3%95%E4%B8%80-%E9%81%8D%E5%8E%86%E5%8E%9F%E6%95%B0%E7%BB%84">法一 ：遍历原数组</a><ul><li><a href="#indexof%E5%88%A4%E6%96%AD">indexOf判断</a></li><li><a href="#includes%E5%88%A4%E6%96%AD">includes判断</a></li></ul></li><li><a href="#%E6%B3%95%E4%BA%8Csplice%E7%9B%B4%E6%8E%A5%E5%8E%BB%E9%99%A4">法二（splice直接去除）</a></li><li><a href="#%E6%B3%95%E4%B8%89sort%E6%8E%92%E5%BA%8F%E5%90%8E%E7%9B%B8%E9%82%BB%E4%BF%A9%E6%AF%94%E8%BE%83">法三（sort排序后相邻俩比较）</a></li><li><a href="#%E6%B3%95%E5%9B%9Bmap%E5%88%A4%E6%96%AD">法四（map判断）</a></li><li><a href="#%E6%B3%95%E4%BA%94%E7%9B%B4%E6%8E%A5%E8%BD%AC%E5%8C%96%E4%B8%BAset">法五（直接转化为set）</a></li><li><a href="#%E5%85%B6%E4%BD%99%E6%96%B9%E6%B3%95">其余方法：</a></li></ul><blockquote><p>注意：<br>以下每种方法都会使用oldErr做测试，我会直接将结果放在方法下面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testArr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;true&#x27;</span>, <span class="string">&#x27;true&#x27;</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>, <span class="string">&#x27;NaN&#x27;</span>, <span class="string">&#x27;NaN&#x27;</span>, &#123;&#125;, &#123;&#125;, &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;zc&quot;</span>&#125;, &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;zc&quot;</span>&#125;]</span><br></pre></td></tr></table></figure></blockquote><h2 id="法一-：遍历原数组"><a href="#法一-：遍历原数组" class="headerlink" title="法一 ：遍历原数组"></a>法一 ：遍历原数组</h2><p>这里第一种方法是新建一个空数组，循环原数组里的每一个元素，并且判断新建数组中是否存在该元素，不存在就把该元素加入到数组里</p><h3 id="indexOf判断"><a href="#indexOf判断" class="headerlink" title="indexOf判断"></a>indexOf判断</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unique_one = <span class="keyword">function</span>(<span class="params">oldArr</span>)&#123; </span><br><span class="line"><span class="keyword">let</span> newArr=[];    <span class="comment">//定义一个临时数组来存储不重复的元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++)&#123;    </span><br><span class="line"><span class="comment">//循环遍历当前数组 </span></span><br><span class="line"><span class="comment">//判断oldArr数组中下标为i的元素是否已经保存到临时数组 </span></span><br><span class="line"><span class="comment">//如果已保存，则跳过，否则将此元素保存到临时数组中 </span></span><br><span class="line"><span class="keyword">if</span>(newArr.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>[i]) == -<span class="number">1</span>)&#123; </span><br><span class="line">newArr.<span class="title function_">push</span>(<span class="variable language_">this</span>[i]); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> newArr; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原数组[1, 1, 0, 1, 0, 15, 15, ‘a’, ‘a’, ‘true’, ‘true’, true, true, false, false, undefined, undefined, null, null, NaN, NaN, ‘NaN’, ‘NaN’, {…}, {…}, {…}, {…}]<br>结果[1, 0, 15, ‘a’, ‘true’, true, false, undefined, null, NaN, NaN, ‘NaN’, {…}, {…}, {…}, {…}]</p></blockquote><p>我们可以发现：使用indexOf方法会把每一个“object对象”以及“NaN”都视为一个不相同的数据</p><h3 id="includes判断"><a href="#includes判断" class="headerlink" title="includes判断"></a>includes判断</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unique_includes = <span class="keyword">function</span> (<span class="params">oldArr</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> newArr = [];    <span class="comment">//定义一个临时数组来存储不重复的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oldArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="comment">//循环遍历当前数组 </span></span><br><span class="line"><span class="comment">//判断oldArr数组中下标为i的元素是否已经保存到临时数组newArr中</span></span><br><span class="line"><span class="comment">//如果存在，则跳过，否则将此元素保存到临时数组中 </span></span><br><span class="line"><span class="keyword">if</span> (!newArr.<span class="title function_">includes</span>(oldArr[i])) &#123;</span><br><span class="line">newArr.<span class="title function_">push</span>(oldArr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原数组[1, 1, 0, 1, 0, 15, 15, ‘a’, ‘a’, ‘true’, ‘true’, true, true, false, false, undefined, undefined, null, null, NaN, NaN, ‘NaN’, ‘NaN’, {…}, {…}, {…}, {…}]<br>结果[1, 0, 15, ‘a’, ‘true’, true, false, undefined, null, NaN, ‘NaN’, {…}, {…}, {…}, {…}]</p></blockquote><p>与indexOf不同，includes可以删除多余的“NaN”，<br>但同样它也不能区分出“object对象”</p><h2 id="法二（splice直接去除）"><a href="#法二（splice直接去除）" class="headerlink" title="法二（splice直接去除）"></a>法二（splice直接去除）</h2><p><strong>注意：splice方法会改变原数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unique_splice = <span class="keyword">function</span> (<span class="params">arr</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (arr[i] == arr[j]) &#123;</span><br><span class="line">                      <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                      arr.<span class="title function_">splice</span>(j, <span class="number">1</span>);</span><br><span class="line">                      j--;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> arr;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><blockquote><p>原数组[1, 1, 0, 1, 0, 15, 15, ‘a’, ‘a’, ‘true’, ‘true’, true, true, false, false, undefined, undefined, null, null, NaN, NaN, ‘NaN’, ‘NaN’, {…}, {…}, {…}, {…}]<br>结果[1, 0, 15, ‘a’, ‘true’, true, false, undefined, null, NaN, NaN, ‘NaN’, {…}, {…}, {…}, {…}]</p></blockquote><p>splice方法是使用 &#x3D;&#x3D;&#x3D; 来判断的，也没办法区分“object对象”和“NaN”类型</p><h2 id="法三（sort排序后相邻俩比较）"><a href="#法三（sort排序后相邻俩比较）" class="headerlink" title="法三（sort排序后相邻俩比较）"></a>法三（sort排序后相邻俩比较）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unique_sort = <span class="keyword">function</span> (<span class="params">oldArr</span>) &#123;</span><br><span class="line">          oldArr.<span class="title function_">sort</span>();</span><br><span class="line">          <span class="keyword">let</span> newArr = [oldArr[<span class="number">0</span>]];</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; oldArr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">              <span class="keyword">if</span>(oldArr[i] !== oldArr[i-<span class="number">1</span>])&#123;</span><br><span class="line">                  newArr.<span class="title function_">push</span>(oldArr[i]);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> newArr;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><blockquote><p>原数组[0, 0, 1, 1, 1, 15, 15, NaN, NaN, ‘NaN’, ‘NaN’, {…}, {…}, {…}, {…}, ‘a’, ‘a’, false, false, null, null, ‘true’, ‘true’, true, true, undefined, undefined]<br>结果[0, 1, 15, NaN, NaN, ‘NaN’, {…}, {…}, {…}, {…}, ‘a’, false, null, ‘true’, true, undefined]</p></blockquote><p>可以看出，这种方法依旧不能判断“object对象”和“NaN”两种类型</p><h2 id="法四（map判断）"><a href="#法四（map判断）" class="headerlink" title="法四（map判断）"></a>法四（map判断）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unique_map = <span class="keyword">function</span> (<span class="params">oldArr</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">          <span class="keyword">let</span> newArr = <span class="keyword">new</span> <span class="title class_">Array</span>();  <span class="comment">// 数组用于返回结果</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oldArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 判断map的键是否存在i元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有改键，说明该元素已经不是第一次出现了</span></span><br><span class="line"><span class="comment">// 就把该键对应的值改为true，表明多次的身份</span></span><br><span class="line">              <span class="keyword">if</span> (map.<span class="title function_">has</span>(oldArr[i])) &#123; </span><br><span class="line">                  map.<span class="title function_">set</span>(oldArr[i], <span class="literal">true</span>);</span><br><span class="line">              &#125; </span><br><span class="line"><span class="comment">// 如果没有改键，说明该元素是第一次出现，</span></span><br><span class="line"><span class="comment">// 就在map中新增该键，对应值设置为false，表明是第一次出现</span></span><br><span class="line"><span class="comment">// 并且在newArr中加入该元素</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                  map.<span class="title function_">set</span>(oldArr[i], <span class="literal">false</span>); </span><br><span class="line">                  newArr.<span class="title function_">push</span>(oldArr[i]);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> newArr;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><blockquote><p>原数组[0, 0, 1, 1, 1, 15, 15, NaN, NaN, ‘NaN’, ‘NaN’, {…}, {…}, {…}, {…}, ‘a’, ‘a’, false, false, null, null, ‘true’, ‘true’, true, true, undefined, undefined]<br>结果[0, 1, 15, NaN, ‘NaN’, {…}, {…}, {…}, {…}, ‘a’, false, null, ‘true’, true, undefined]</p></blockquote><p>可以删除多余的“NaN”，<br>但不能区分出“object对象”</p><h2 id="法五（直接转化为set）"><a href="#法五（直接转化为set）" class="headerlink" title="法五（直接转化为set）"></a>法五（直接转化为set）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unique_set = <span class="keyword">function</span> (<span class="params">arr</span>) &#123;</span><br><span class="line"><span class="comment">// Array.from()是一个初始化数组的方法</span></span><br><span class="line">          <span class="comment">// Array.from()是可以将Set,Map转化位数组</span></span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>( <span class="keyword">new</span> <span class="title class_">Set</span>(arr) );</span><br><span class="line"></span><br><span class="line">          <span class="comment">// ...扩展符也可以将Set转化为数组</span></span><br><span class="line">          <span class="comment">// return [...new Set(arr)];</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><blockquote><p>原数组[0, 0, 1, 1, 1, 15, 15, NaN, NaN, ‘NaN’, ‘NaN’, {…}, {…}, {…}, {…}, ‘a’, ‘a’, false, false, null, null, ‘true’, ‘true’, true, true, undefined, undefined]<br>结果[0, 1, 15, NaN, ‘NaN’, {…}, {…}, {…}, {…}, ‘a’, false, null, ‘true’, true, undefined]</p></blockquote><p>set可以删除多余的“NaN”，<br>但不能区分出“object对象”</p><h2 id="其余方法："><a href="#其余方法：" class="headerlink" title="其余方法："></a>其余方法：</h2><p>1.filter() + indexOf()：<br>    filter方法会对满足条件的元素存放到一个新数组中，结合indexOf方法进行判断。<br>2.foreach() + indexOf()<br>3.reduce() + includes()<br>其实，这些方法实现思路都大同小异，<br>如果对这些方法不熟悉，可以去查看具体使用方法<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">Javascript的数组</a></p><blockquote><p>本期代码都会放置在GitHub上，需要的自己前往查看<br><a href="https://github.com/MTTQ123/InterviewQuestions">前往GitHub查看</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> interviewQuestion </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深拷贝 </tag>
            
            <tag> js面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现深拷贝</title>
      <link href="/posts/81a82e7b.html"/>
      <url>/posts/81a82e7b.html</url>
      
        <content type="html"><![CDATA[<h1 id="js实现深拷贝"><a href="#js实现深拷贝" class="headerlink" title="js实现深拷贝"></a>js实现深拷贝</h1><hr><ul><li><a href="#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86">前置知识：</a></li><li><a href="#%E5%BC%80%E5%A7%8B">开始</a><ul><li><a href="#%E4%B8%80-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">（一）、基本类型</a></li><li><a href="#%E4%BA%8C-object%E7%B1%BB%E5%9E%8B">（二）、object类型</a><ul><li><a href="#map">Map</a></li><li><a href="#set">Set</a></li><li><a href="#array%E5%92%8C%E6%99%AE%E9%80%9Aobject">Array和普通Object</a></li></ul></li></ul></li><li><a href="#%E7%BB%93%E6%9D%9F">结束</a></li></ul><hr><h2 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h2><p><strong>浅拷贝</strong>：<em>复制一个对象后，改变该对象，原对象的值也随之改变</em><br><strong>深拷贝</strong>：<em>改变复制之后的对象，原对象的值不会发生变化</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 浅拷贝：</span></span><br><span class="line"><span class="keyword">const</span> num1 = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = num1;</span><br><span class="line">num2 = <span class="number">999</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1, num2);  <span class="comment">// 9，999</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝：</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr1;</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1, arr2);  <span class="comment">// [0,2,3], [0,2,3]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此外，如果想深入了解你还需了解原型链</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>我们可以创建一个函数，把要复制的那个对象传入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会对传入的数据进行判断，不同的类型会有不同的操作</p><h3 id="（一）、基本类型"><a href="#（一）、基本类型" class="headerlink" title="（一）、基本类型"></a>（一）、基本类型</h3><p>首先，如果传入的是一个基本类型数据（String、Number、boolean、null、undefined），那么我们什么都不需要做，直接将该值返回即可</p><blockquote><p>我们可以通过typeof来判断数据的大致类型：</p></blockquote><table><thead><tr><th>类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>“undefined”</td></tr><tr><td>Null</td><td>“object”</td></tr><tr><td>Boolean</td><td>“boolean”</td></tr><tr><td>Number</td><td>“number”</td></tr><tr><td>BigInt</td><td>“bigint”</td></tr><tr><td>String</td><td>“string”</td></tr><tr><td>Symbol</td><td>“symbol”</td></tr><tr><td>Function</td><td>“function”</td></tr><tr><td>其他任何对象</td><td>“object”</td></tr><tr><td>从上表可以看出，除了“其他任何对象”外，其余类型我们均需要直接返回</td><td></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_">typeof</span>(obj) !== <span class="string">&#x27;object&#x27;</span> || obj === <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（二）、object类型"><a href="#（二）、object类型" class="headerlink" title="（二）、object类型"></a>（二）、object类型</h3><p>接下来，就该object包含的的各种数据类型了，在这里，我就只是简单的判断下Array，Object，Map，Set，其余类型可以自己尝试<br>如果要检测数据的具体类型，就不能1单纯使用typeof了（因为typeof返回的都是”object”），我们可以使用instanceof，如果你正困惑与instanceof，可以先去了解一下instanceof<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof">instance运算符简介</a></p><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Map</span>)&#123;</span><br><span class="line"><span class="comment">//new会重新开辟一份空间</span></span><br><span class="line"><span class="keyword">const</span> temp = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">obj.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val, key</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//map的键只能是字符串，因此键直接传递即可</span></span><br><span class="line"><span class="comment">//如果map里的值同样是object类型，同样需要进行深拷贝，因此进行递归</span></span><br><span class="line">temp.<span class="title function_">set</span>(key,<span class="title function_">deepClone</span>( val ));</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Set</span>)&#123;</span><br><span class="line"><span class="comment">//new会重新开辟一份空间</span></span><br><span class="line"><span class="keyword">const</span> temp = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">obj.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//如果set里的值同样是object类型，同样需要进行深拷贝，因此进行递归</span></span><br><span class="line">temp.<span class="title function_">add</span>( <span class="title function_">deepClone</span>( val ));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Array和普通Object"><a href="#Array和普通Object" class="headerlink" title="Array和普通Object"></a>Array和普通Object</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果传入的是Array =&gt; obj.constructor()就i相当于[ ]</span></span><br><span class="line"><span class="comment">//如果传入的是Object=&gt; obj.constructor()就i相当于&#123; &#125;</span></span><br><span class="line"><span class="keyword">const</span> temp = <span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">temp[i] = <span class="title function_">deepClone</span>( obj[i] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此，我们就完成了js中四种类型的深拷贝，js中的类型还有很多，但基本思路也大体是这样了</p><blockquote><p>本期代码都会放置在GitHub上，需要的自己前往查看<br><a href="https://github.com/MTTQ123/InterviewQuestions">前往GitHub查看</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> interviewQuestion </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深拷贝 </tag>
            
            <tag> js面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"TT`Blog","short_name":"T_T","theme_color":"#425aef","background_color":"#425aef","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;}div#menus {    font-family: 'ZhuZiAYuanJWD';}h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {    font-family: ZhuZiAYuanJWD;}.iconfont {    font-family: 'iconfont' !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}.icon-zhongbiao::before {    color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;}a.bangumi-tab:hover {    text-decoration: none !important;}.bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;}.bangumi-button {    padding: 5px 10px !important;}a.bangumi-tab {    padding: 5px 10px !important;}svg.icon.faa-tada {    font-size: 1.1em;}.bangumi-info-item {    border-right: 1px solid #f2b94b;}.bangumi-info-item span {    color: #f2b94b;}.bangumi-info-item em {    color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource>svg {    width: 1.19em;    height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {    background-color: transparent !important;}/* 首页文章卡片 */#recent-posts>.recent-post-item {    background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {    background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {    background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {    background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {    background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {    background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme='dark'] #recent-posts>.recent-post-item {    background: #121212;}[data-theme='dark'] .card-widget {    background: #121212 !important;}[data-theme='dark'] div#post {    background: #121212 !important;}[data-theme='dark'] div#tag {    background: #121212 !important;}[data-theme='dark'] div#archive {    background: #121212 !important;}[data-theme='dark'] div#page {    background: #121212 !important;}[data-theme='dark'] div#category {    background: #121212 !important;}[data-theme='dark'] div#category {    background: transparent !important;}/* 页脚透明 */#footer {    background: transparent !important;}/* 头图透明 */#page-header {    background: transparent !important;}#rightside>div>button {    border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {    width: 10px;    height: 10px;}::-webkit-scrollbar-thumb {    background-color: #425aef;    border-radius: 2em;}::-webkit-scrollbar-corner {    background-color: transparent;}::-moz-selection {    color: #fff;    background-color: #425aef;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {    display: none !important;  } */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {    z-index: 999999 !important;}/* 评论框  */.vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;}/* 鼠标图标 *//* body {    cursor: url('/img/x1.cur'), auto;}a,[type='button']:not(:disabled),[type='reset']:not(:disabled),[type='submit']:not(:disabled),button:not(:disabled) {    cursor: url('/img/x2.cur'), auto !important;} *//* md网站下划线 */#article-container a:hover {    text-decoration: none !important;}#article-container #hpp_talk p img {    display: inline;}/* 404页面 */#error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);}#error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;}#error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #425aef;    background-position: center;    background-size: cover;}#error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;}#error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;}#error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);}#body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--heo-card-bg);    display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;}#body-wrap.error .aside-list .aside-list-item .content time {    display: none;}/* 代码框主题 */#article-container figure.highlight {    border-radius: 10px;}/* 归档样式  下 */span.card-archive-list-count {    width: auto;    text-align: left;    font-size: 1.5rem;    line-height: 0.9;    font-weight: 700;}.card-archive-list-count-group {    display: flex;    flex-direction: row;    align-items: baseline;}#aside-content .card-archives ul.card-archive-list>.card-archive-list-item a span:last-child,#aside-content .card-categories ul.card-category-list>.card-category-list-item a span:last-child {    width: fit-content;    margin-left: 4px;}span.card-archive-list-count {    width: auto;    text-align: left;    font-size: 1.1rem;    line-height: .9;    font-weight: 700;}.card-archive-list-date {    font-size: 14px;    opacity: 0.6;}li.card-archive-list-item {    width: 100%;    flex: 0 0 48%;}#aside-content .card-archives ul.card-archive-list>.card-archive-list-item a:hover,#aside-content .card-categories ul.card-category-list>.card-category-list-item a:hover {    color: var(--anzhiyu-white);    background-color: var(--anzhiyu-theme);    box-shadow: var(--anzhiyu-shadow-theme);    border-radius: 8px;    padding-left: 0.5rem;    padding-right: 0.5rem;}@media screen and (min-width: 1300px) {    #aside-content .card-archives ul.card-archive-list>.card-archive-list-item a:hover,    #aside-content .card-categories ul.card-category-list>.card-category-list-item a:hover {        transform: scale(1.03);    }    #aside-content .card-archives ul.card-archive-list>.card-archive-list-item a:active,    #aside-content .card-categories ul.card-category-list>.card-category-list-item a:active {        transform: scale(0.97);    }}#aside-content .card-archives ul.card-archive-list>.card-archive-list-item a,#aside-content .card-categories ul.card-category-list>.card-category-list-item a {    border-radius: 8px;    margin: 4px 0;    display: flex;    flex-direction: column;    align-content: space-between;    border: var(--style-border);}#aside-content .card-archives ul.card-archive-list>.card-archive-list-item a span:first-child,#aside-content .card-categories ul.card-category-list>.card-category-list-item a span:first-child {    width: auto;    flex: inherit;}#aside-content .card-archives ul.card-archive-list,#aside-content .card-categories ul.card-category-list {    display: flex;    flex-direction: row;    justify-content: space-between;    flex-wrap: wrap;}#aside-content .card-archives ul.card-archive-list>.card-archive-list-item {    border: var(--dark-grey) solid 2px;    border-radius: 6px;}/* 归档样式  上*//* 边栏最近文章样式  下 */#aside-content .aside-list>.aside-list-item .content>time {    display: none;}#aside-content .aside-list>.aside-list-item .content>.title {    -webkit-line-clamp: 3;    font-weight: 700;    padding: 2px 0;}#aside-content .aside-list>.aside-list-item {    padding: 8px;    padding-top: 6px !important;    padding-bottom: 6px !important;    border-radius: 12px;    transition: 0.3s;    margin: 4px 0;    cursor: pointer;}@media screen and (min-width: 1300px) {    #aside-content .aside-list>.aside-list-item:hover {        transform: scale(1.03);    }    #aside-content .aside-list>.aside-list-item:active {        transform: scale(0.97);    }}#aside-content .aside-list>.aside-list-item:hover .thumbnail>img {    transform: scale(1);}#aside-content .aside-list>.aside-list-item:not(:last-child) {    border-bottom: 0 dashed var(--anzhiyu-background) !important;}#aside-content .aside-list>.aside-list-item .thumbnail {    border-radius: 8px;    border: var(--style-border);}#aside-content .aside-list>.aside-list-item:hover {    background: var(--anzhiyu-blue-main);    color: var(--anzhiyu-white);    transition: 0.3s;    box-shadow: var(--anzhiyu-shadow-main);}#aside-content .aside-list>.aside-list-item:hover a {    color: var(--anzhiyu-white) !important;}.card-widget.card-recent-post {    padding: 0.4rem 0.6rem !important;}/* 边栏最近文章样式  上 *//* 加载渐变条   下 */.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 10px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 100vw;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden}.pace-inactive .pace-progress {    opacity: 0;    transition: .3s ease-in}.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    /* max-width: 600px; */    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);    animation: gradient 1.5s ease infinite;    background-size: 200%}.pace.pace-inactive {    opacity: 0;    transition: .3s;    top: -8px}@keyframes gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}/* 加载渐变条   上 *//*移动端优化：去除归档、标签、最新文章、公告、、只保留网站统计*/@media screen and (max-width: 800px) {    #aside_content div:not(:last-child) {        display: none;        font-size: 13px;    }}/*移动端优化：去除归档、标签、最新文章、公告、、只保留网站统计*/]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/coin/coin.css"/>
      <url>/css/coin/coin.css</url>
      
        <content type="html"><![CDATA[.tip-button {    border: 0;    border-radius: 0.25rem;    cursor: pointer;    font-size: 20px;    font-weight: 600;    height: 2.6rem;    margin-bottom: -4rem;    outline: 0;    position: relative;    top: 0;    transform-origin: 0% 100%;    transition: transform 50ms ease-in-out;    width: auto;    -webkit-tap-highlight-color: transparent;}.tip-button:active {    transform: rotate(4deg);}.tip-button.clicked {    animation: 150ms ease-in-out 1 shake;    pointer-events: none;}.tip-button.clicked .tip-button__text {    opacity: 0;    transition: opacity 100ms linear 200ms;}.tip-button.clicked::before {    height: 0.5rem;    width: 60%;    background: $button-hover-color;}.tip-button.clicked .coin {    transition: margin-bottom 1s linear 200ms;    margin-bottom: 0;}.tip-button.shrink-landing::before {    transition: width 200ms ease-in;    width: 0;}.tip-button.coin-landed::after {    opacity: 1;    transform: scale(1);    transform-origin: 50% 100%;}.tip-button.coin-landed .coin-wrapper {    background: radial-gradient(circle at 35% 97%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at 45% 92%,            rgba(3, 16, 50, 0.4) 0.04rem,            transparent 0.02rem), radial-gradient(circle at 55% 98%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at 65% 96%, rgba(3, 16, 50, 0.4) 0.06rem, transparent 0.06rem);    background-position: center bottom;    background-size: 100%;    bottom: -1rem;    opacity: 0;    transform: scale(2) translateY(-10px);}.tip-button__text {    color: #fff;    margin-right: 1.8rem;    opacity: 1;    position: relative;    transition: opacity 100ms linear 500ms;    z-index: 3;}.tip-button::before {    border-radius: 0.25rem;    bottom: 0;    content: "";    display: block;    height: 100%;    left: 50%;    position: absolute;    transform: translateX(-50%);    transition: height 250ms ease-in-out 400ms, width 250ms ease-in-out 300ms;    width: 100%;    z-index: 2;}.tip-button::after {    bottom: -1rem;    color: white;    content: "ヾ(≧O≦)〃嗷~";    /*点击后显示的内容*/    height: 110%;    left: 0;    opacity: 0;    position: absolute;    pointer-events: none;    text-align: center;    transform: scale(0);    transform-origin: 50% 20%;    transition: transform 200ms cubic-bezier(0, 0, 0.35, 1.43);    width: 100%;    z-index: 1;}.coin-wrapper {    background: none;    bottom: 0;    height: 18rem;    left: 0;    opacity: 1;    overflow: hidden;    pointer-events: none;    position: absolute;    transform: none;    transform-origin: 50% 100%;    transition: opacity 200ms linear 100ms, transform 300ms ease-out;    width: 100%;}.coin {    --front-y-multiplier: 0;    --back-y-multiplier: 0;    --coin-y-multiplier: 0;    --coin-x-multiplier: 0;    --coin-scale-multiplier: 0;    --coin-rotation-multiplier: 0;    --shine-opacity-multiplier: 0.4;    --shine-bg-multiplier: 50%;    bottom: calc(var(--coin-y-multiplier) * 1rem - 3.5rem);    height: 3.5rem;    margin-bottom: 3.05rem;    position: absolute;    right: calc(var(--coin-x-multiplier) * 34% + 16%);    transform: translateX(50%) scale(calc(0.4 + var(--coin-scale-multiplier))) rotate(calc(var(--coin-rotation-multiplier) * -1deg));    transition: opacity 100ms linear 200ms;    width: 3.5rem;    z-index: 3;}.coin__front,.coin__middle,.coin__back,.coin::before,.coin__front::after,.coin__back::after {    border-radius: 50%;    box-sizing: border-box;    height: 100%;    left: 0;    position: absolute;    width: 100%;    z-index: 3;}.coin__front {    background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),        linear-gradient(210deg, #8590b3 32%, transparent 32%), linear-gradient(150deg, #8590b3 32%, transparent 32%),        linear-gradient(to right, #8590b3 22%, transparent 22%, transparent 78%, #8590b3 78%), linear-gradient(to bottom,            #fcfaf9 44%,            transparent 44%,            transparent 65%,            #fcfaf9 65%,            #fcfaf9 71%,            #8590b3 71%), linear-gradient(to right, transparent 28%, #fcfaf9 28%, #fcfaf9 34%, #8590b3 34%, #8590b3 40%, #fcfaf9 40%, #fcfaf9 47%, #8590b3 47%, #8590b3 53%, #fcfaf9 53%, #fcfaf9 60%, #8590b3 60%, #8590b3 66%, #fcfaf9 66%, #fcfaf9 72%, transparent 72%);    background-color: #8590b3;    background-size: 100% 100%;    transform: translateY(calc(var(--front-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--front-scale-multiplier));}.coin__front::after {    background: rgba(0, 0, 0, 0.2);    content: "";    opacity: var(--front-y-multiplier);}.coin__middle {    background: #737c99;    transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--middle-scale-multiplier));}.coin__back {    background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),        radial-gradient(circle at 50% 40%, #fcfaf9 23%, transparent 23%), radial-gradient(circle at 50% 100%, #fcfaf9 35%, transparent 35%);    background-color: #8590b3;    background-size: 100% 100%;    transform: translateY(calc(var(--back-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--back-scale-multiplier));}.coin__back::after {    background: rgba(0, 0, 0, 0.2);    content: "";    opacity: var(--back-y-multiplier);}.coin::before {    background: radial-gradient(circle at 25% 65%, transparent 50%, rgba(255, 255, 255, 0.9) 90%), linear-gradient(55deg, transparent calc(var(--shine-bg-multiplier) + 0%), #e9f4ff calc(var(--shine-bg-multiplier) + 0%), transparent calc(var(--shine-bg-multiplier) + 50%));    content: "";    opacity: var(--shine-opacity-multiplier);    transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / -2)) scaleY(var(--middle-scale-multiplier)) rotate(calc(var(--coin-rotation-multiplier) * 1deg));    z-index: 10;}.coin::after {    background: #737c99;    content: "";    height: 0.3181818182rem;    left: 0;    position: absolute;    top: 50%;    transform: translateY(-50%);    width: 100%;    z-index: 2;}@keyframes shake {    0% {        transform: rotate(4deg);    }    66% {        transform: rotate(-4deg);    }    100% {        transform: rotate();    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/coin/coin.js"/>
      <url>/js/coin/coin.js</url>
      
        <content type="html"><![CDATA[var tipButtons = document.querySelectorAll(".tip-button");function coinAudio() {    var coinAudio = document.getElementById("coinAudio");    if (coinAudio) {        coinAudio.play(); //有音频时播放    }}// Loop through all buttons (allows for multiple buttons on page)tipButtons.forEach(button => {    var coin = button.querySelector(".coin");    // The larger the number, the slower the animation    coin.maxMoveLoopCount = 90;    button.addEventListener("click", () => {        if (/Android|webOS|BlackBerry/i.test(navigator.userAgent)) return true; //媒体选择        if (button.clicked) return;        button.classList.add("clicked");        // Wait to start flipping th coin because of the button tilt animation        setTimeout(() => {            // Randomize the flipping speeds just for fun            coin.sideRotationCount = Math.floor(Math.random() * 5) * 90;            coin.maxFlipAngle = (Math.floor(Math.random() * 4) + 3) * Math.PI;            button.clicked = true;            flipCoin();            coinAudio();        }, 50);    });    var flipCoin = () => {        coin.moveLoopCount = 0;        flipCoinLoop();    };    var resetCoin = () => {        coin.style.setProperty("--coin-x-multiplier", 0);        coin.style.setProperty("--coin-scale-multiplier", 0);        coin.style.setProperty("--coin-rotation-multiplier", 0);        coin.style.setProperty("--shine-opacity-multiplier", 0.4);        coin.style.setProperty("--shine-bg-multiplier", "50%");        coin.style.setProperty("opacity", 1);        // Delay to give the reset animation some time before you can click again        setTimeout(() => {            button.clicked = false;        }, 300);    };    var flipCoinLoop = () => {        coin.moveLoopCount++;        var percentageCompleted = coin.moveLoopCount / coin.maxMoveLoopCount;        coin.angle = -coin.maxFlipAngle * Math.pow(percentageCompleted - 1, 2) + coin.maxFlipAngle;        // Calculate the scale and position of the coin moving through the air        coin.style.setProperty("--coin-y-multiplier", -11 * Math.pow(percentageCompleted * 2 - 1, 4) + 11);        coin.style.setProperty("--coin-x-multiplier", percentageCompleted);        coin.style.setProperty("--coin-scale-multiplier", percentageCompleted * 0.6);        coin.style.setProperty("--coin-rotation-multiplier", percentageCompleted * coin.sideRotationCount);        // Calculate the scale and position values for the different coin faces        // The math uses sin/cos wave functions to similate the circular motion of 3D spin        coin.style.setProperty("--front-scale-multiplier", Math.max(Math.cos(coin.angle), 0));        coin.style.setProperty("--front-y-multiplier", Math.sin(coin.angle));        coin.style.setProperty("--middle-scale-multiplier", Math.abs(Math.cos(coin.angle), 0));        coin.style.setProperty("--middle-y-multiplier", Math.cos((coin.angle + Math.PI / 2) % Math.PI));        coin.style.setProperty("--back-scale-multiplier", Math.max(Math.cos(coin.angle - Math.PI), 0));        coin.style.setProperty("--back-y-multiplier", Math.sin(coin.angle - Math.PI));        coin.style.setProperty("--shine-opacity-multiplier", 4 * Math.sin((coin.angle + Math.PI / 2) % Math.PI) - 3.2);        coin.style.setProperty("--shine-bg-multiplier", -40 * (Math.cos((coin.angle + Math.PI / 2) % Math.PI) - 0.5) + "%");        // Repeat animation loop        if (coin.moveLoopCount < coin.maxMoveLoopCount) {            if (coin.moveLoopCount === coin.maxMoveLoopCount - 6) button.classList.add("shrink-landing");            window.requestAnimationFrame(flipCoinLoop);        } else {            button.classList.add("coin-landed");            coin.style.setProperty("opacity", 0);            setTimeout(() => {                button.classList.remove("clicked", "shrink-landing", "coin-landed");                setTimeout(() => {                    resetCoin();                }, 300);            }, 1500);        }    };});]]></content>
      
    </entry>
    
    
  
</search>
